#!/usr/bin/env python3
"""
3n-1 Conjecture Evaluator

Evaluates the 3n-1 conjecture for numbers and creates matplotlib graphs.
The 3n-1 conjecture states that for any positive integer n:
- If n is even: n → n/2
- If n is odd: n → 3n-1
Repeatedly applying these rules will eventually reach 1.
"""

import os
import sys
import matplotlib.pyplot as plt
from tqdm import tqdm


def conjecture_3n_minus_1(n, max_steps=10000):
    """
    Calculate the sequence for the 3n-1 conjecture starting from n.
    
    Args:
        n: Starting number
        max_steps: Maximum number of steps to prevent infinite loops
    
    Returns:
        List of numbers in the sequence
    """
    if n <= 0:
        raise ValueError("Starting number must be positive")
    
    sequence = [n]
    current = n
    steps = 0
    
    while current != 1 and steps < max_steps:
        if current % 2 == 0:
            # Even: divide by 2
            current = current // 2
        else:
            # Odd: 3n - 1
            current = 3 * current - 1
        
        sequence.append(current)
        steps += 1
    
    return sequence


def create_graph(n, sequence, output_dir="conjecture_graphs"):
    """
    Create a matplotlib graph for the conjecture sequence.
    
    Args:
        n: Starting number
        sequence: The sequence generated by the conjecture
        output_dir: Directory to save the graph
    """
    # Create output directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)
    
    # Create the plot
    plt.figure(figsize=(12, 6))
    
    # Plot the sequence
    steps = range(len(sequence))
    plt.plot(steps, sequence, 'b-', linewidth=1.5, marker='o', markersize=3)
    
    # Add labels and title
    plt.xlabel('Step Number', fontsize=12)
    plt.ylabel('Value', fontsize=12)
    plt.title(f'3n-1 Conjecture for n={n}\n(Steps: {len(sequence)-1}, Max value: {max(sequence)})', 
              fontsize=14, fontweight='bold')
    
    # Add grid
    plt.grid(True, alpha=0.3, linestyle='--')
    
    # Use logarithmic scale if values vary widely
    if max(sequence) > 0 and min(sequence) > 0 and max(sequence) / min(sequence) > 100:
        plt.yscale('log')
        plt.ylabel('Value (log scale)', fontsize=12)
    
    # Mark the start and end points
    plt.scatter([0], [sequence[0]], color='green', s=100, zorder=5, label='Start')
    plt.scatter([len(sequence)-1], [sequence[-1]], color='red', s=100, zorder=5, label='End')
    
    plt.legend()
    plt.tight_layout()
    
    # Save the figure
    filename = os.path.join(output_dir, f'conjecture_n{n}.png')
    plt.savefig(filename, dpi=150, bbox_inches='tight')
    plt.close()
    
    return filename


def get_numbers_from_user():
    """
    Get the numbers to evaluate from user input.
    
    Returns:
        List of numbers to evaluate
    """
    print("\n" + "="*60)
    print("3n-1 CONJECTURE EVALUATOR")
    print("="*60)
    print("\nEvaluates numbers using the 3n-1 conjecture:")
    print("  • If n is even: n → n/2")
    print("  • If n is odd: n → 3n-1")
    print("\nGenerates a graph for each number showing the sequence.\n")
    
    while True:
        mode = input("Choose input mode:\n  1. Single number\n  2. Range of numbers\n  3. Custom list\nEnter choice (1-3): ").strip()
        
        if mode == '1':
            # Single number
            while True:
                try:
                    n = int(input("\nEnter a positive number: "))
                    if n <= 0:
                        print("Number must be positive. Please try again.")
                        continue
                    return [n]
                except ValueError:
                    print("Invalid input. Please enter a valid integer.")
        
        elif mode == '2':
            # Range of numbers
            while True:
                try:
                    start = int(input("\nEnter the starting number (min 1): "))
                    if start < 1:
                        print("Starting number must be at least 1. Please try again.")
                        continue
                    
                    end = int(input(f"Enter the ending number (min {start}): "))
                    if end < start:
                        print(f"Ending number must be at least {start}. Please try again.")
                        continue
                    
                    if end - start + 1 > 100:
                        confirm = input(f"\nThis will generate {end - start + 1} graphs. Continue? (y/n): ")
                        if confirm.lower() != 'y':
                            continue
                    
                    return list(range(start, end + 1))
                except ValueError:
                    print("Invalid input. Please enter valid integers.")
        
        elif mode == '3':
            # Custom list
            while True:
                try:
                    numbers_str = input("\nEnter numbers separated by commas (e.g., 5,12,27,100): ")
                    numbers = [int(n.strip()) for n in numbers_str.split(',')]
                    
                    if any(n <= 0 for n in numbers):
                        print("All numbers must be positive. Please try again.")
                        continue
                    
                    if len(numbers) > 100:
                        confirm = input(f"\nThis will generate {len(numbers)} graphs. Continue? (y/n): ")
                        if confirm.lower() != 'y':
                            continue
                    
                    return numbers
                except ValueError:
                    print("Invalid input. Please enter valid integers separated by commas.")
        
        else:
            print("Invalid choice. Please enter 1, 2, or 3.")


def main():
    """Main function to run the conjecture evaluator."""
    # Get numbers to evaluate
    numbers = get_numbers_from_user()
    
    print(f"\n{'='*60}")
    print(f"Processing {len(numbers)} number(s)...")
    print(f"{'='*60}\n")
    
    results = []
    
    # Process each number with progress bar
    for n in tqdm(numbers, desc="Evaluating", unit="num"):
        try:
            # Calculate the sequence
            sequence = conjecture_3n_minus_1(n)
            
            # Create the graph
            filename = create_graph(n, sequence)
            
            results.append({
                'n': n,
                'steps': len(sequence) - 1,
                'max_value': max(sequence),
                'filename': filename,
                'reached_1': sequence[-1] == 1
            })
        except Exception as e:
            print(f"\nError processing n={n}: {e}")
    
    # Display results
    print(f"\n{'='*60}")
    print("RESULTS")
    print(f"{'='*60}\n")
    
    print(f"{'Number':<10} {'Steps':<10} {'Max Value':<15} {'Reached 1':<12}")
    print("-" * 60)
    
    for result in results:
        reached = "Yes" if result['reached_1'] else "No"
        print(f"{result['n']:<10} {result['steps']:<10} {result['max_value']:<15} {reached:<12}")
    
    print(f"\n{'='*60}")
    print(f"Graphs saved to 'conjecture_graphs/' directory")
    print(f"Total graphs created: {len(results)}")
    print(f"{'='*60}\n")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nOperation cancelled by user.")
        sys.exit(0)
